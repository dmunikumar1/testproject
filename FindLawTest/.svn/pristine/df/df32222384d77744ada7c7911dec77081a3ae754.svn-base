package tr.findlaw.tests;

import org.testng.annotations.Test;

import com.framework.utils.ExcelUtils;

import tr.findlaw.basetest.FindlawBaseTest;

import tr.findlaw.pages.AddProductsPage;
import tr.findlaw.pages.Contact28Page;
import tr.findlaw.pages.ContactsPage;
import tr.findlaw.pages.EsignProcessPage;
import tr.findlaw.pages.FindLawOrderToolPage;
import tr.findlaw.pages.GenerateDocumentPage;
import tr.findlaw.pages.OpptyPage;
import tr.findlaw.pages.QuotePage;
import tr.findlaw.pages.SearchQuotePage;
import tr.findlaw.pages.SendEsignPage;
import tr.findlaw.pages.ValidateEsignPage;

public class Sprint_20 extends FindlawBaseTest {

	/*
	 * Take any Existing Account which is not having US PPC product.Add US PPC product:30010890.
	 * 	Create Bundle 2,3,5 and 6 and validate the PPC message.
	 */
	
		 @Test(enabled = false, description = "SOC_6442_Implementing max quantity rule for Existing PPC with Firmsite")
	     public void soc_6442() {	 
				applicationLogin();
               /* String Account = ExcelUtils.getDataByColumnNameWithRowIndex("AddProducts", "ProductID", 74);
				accountpage = new Accountpage(driver);	
				accountpage.searchExistAccounts(Account);*/
				contactsPage = new ContactsPage(driver);
				//String ContactName= contactsPage.createNewContact();
				ExcelUtils.getDataByColumnNameWithRowIndex("Contacts", "Id", 74);
				contactsPage.searchExistContact(74);
				OpptyPage optypage = new OpptyPage(driver);
				optypage.createOpty();
				quotepage = new QuotePage(driver);
				quotepage.createQuote();
				addproductspage = new AddProductsPage(driver);
				addproductspage.validatePPCMessage(74);          
		 }	
		 
		 
/*
 * Take any Existing account which is not having US PPC product:30010890  as an Asset and should have any one of the Firmsite product as an asset.
 * Add that US PPC product to the cart and complete the order. 	 
 */
		 @Test(enabled = true, description = "SAP Create Sales BOM & Config Item Category determination for PPC Product Model")
	     public void soc_6152() {	 
				applicationLogin();
				/*accountpage = new Accountpage(driver);	
				accountpage.searchExistAccount(75);*/
				contactsPage = new ContactsPage(driver);
				//String ContactName= contactsPage.createNewContact();
				String ContactName = ExcelUtils.getDataByColumnNameWithRowIndex("Contacts", "Id", 75);
				contactsPage.searchExistContact(75);
				OpptyPage optypage = new OpptyPage(driver);
				optypage.createOpty();
				quotepage = new QuotePage(driver);
				String QuoteId= quotepage.createQuote();
				addproductspage = new AddProductsPage(driver);
				addproductspage.addProducts(21,75); 
				searchquotepage = new SearchQuotePage(driver);
				searchquotepage.searchQuote(QuoteId);
				contact28page = new Contact28Page(driver);
				contact28page.addContact28(ContactName);
				generateDocumentPage = new GenerateDocumentPage(driver);
				generateDocumentPage.generateDocument();
				sendesignPage = new SendEsignPage(driver);
				sendesignPage.sendForEsign();
				webmailLogin();
				esignprocesspage = new EsignProcessPage(driver);
				esignprocesspage.esignProcess();
				applicationLogin();
				//String QuoteId= ExcelUtils.getDataByColumnNameWithRowIndex("Quote", "Name", 75);
				searchquotepage = new SearchQuotePage(driver);
				searchquotepage.searchQuote(QuoteId);
				validateesignpage = new ValidateEsignPage(driver);
				validateesignpage.validateEsign();
				findlawordertoolpage = new FindLawOrderToolPage(driver);
				findlawordertoolpage.clickCOB();
				findlawordertoolpage.loginWithSafeuserId(QuoteId);
				findlawordertoolpage.cobProcess(24);  //22
				applicationLogin();
				searchquotepage = new SearchQuotePage(driver);
				searchquotepage.searchQuote(QuoteId);
				validateesignpage = new ValidateEsignPage(driver);
				validateesignpage.validateOrder(); 
		 } 
	
}
